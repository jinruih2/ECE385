#include <system.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <alt_types.h>
#include "sprite_draw.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS/4); i++)
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}

void drawSpriteAtLocation(int sprite_idx, int x, int y)
{
	// int i = 0;
	// while (str[i]!=0)
	// {
	// 	vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
	// 	vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
	// 	i++;
	// }
	int vram_idx;
	int vram_offset;
	vram_idx = y * COLUMNS + x / 4;
	vram_offset = (y * COLUMNS + x) % 4;
	vga_ctrl -> VRAM[vram_idx] &= ~(0xFF << vram_offset * 8);
	vga_ctrl -> VRAM[vram_idx] &= sprite_idx << vram_offset * 8;
	printf('draw once!')
}

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	int color_row = color / 2;
	int color_col = color % 2;
	if (color_col == 0) {
		vga_ctrl -> COLOR[color_row] &= ~(0xFFF << 1);
		vga_ctrl -> COLOR[color_row] |= (blue << 1 | green << 5 | red << 9);
	}
	else {
		vga_ctrl -> COLOR[color_row] &= ~(0xFFF << 13);
		vga_ctrl -> COLOR[color_row] |= (blue << 13 | green << 17 | red << 21);
	}
}


void groundTest()
{
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	drawSpriteAtLocation(1, 3, 3);

	// for (int x = 0; x < 11; i++){
	// 	for (int y = 0; y < 11; y++)
	// 	{
	// 		drawSpriteAtLocation(0, x, y);
	// 	}
	// }
}
