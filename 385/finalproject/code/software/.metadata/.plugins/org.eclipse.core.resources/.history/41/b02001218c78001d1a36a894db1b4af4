#include "get_kb.h"
#include "sprite_draw.h"

int game_play(){
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
	MAX3421E_init();
	printf("initializing USB...\n");
	USB_init();

	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
    int char_x = 3;
    int char_y = 3;
    drawSpriteAtLocation(1, char_x, char_y);


    while(1){
        printf(". \n");
        MAX3421E_Task();
		USB_Task();
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
			if (!runningdebugflag) {
				runningdebugflag = 1;
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
				} else if (rcode) {
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
					printf("%x ", kbdbuf.keycode[i]);
				}
                int key = kbdbuf.keycode[0];
                switch (key){
                    case KEY_W:
                        drawSpriteAtLocation(0, char_x, char_y);
                        char_y = char_y - 1;
                        drawSpriteAtLocation(1, char_x, char_y);
                        break;
                    case KEY_A:
                        drawSpriteAtLocation(0, char_x, char_y);
                        char_x = char_x - 1;
                        drawSpriteAtLocation(1, char_x, char_y);
                        break;
                    case KEY_S:
                        drawSpriteAtLocation(0, char_x, char_y);
                        char_y = char_y + 1;
                        drawSpriteAtLocation(1, char_x, char_y);
                        break;
                    case KEY_D:
                        drawSpriteAtLocation(0, char_x, char_y);
                        char_x = char_x + 1;
                        drawSpriteAtLocation(1, char_x, char_y);
                        break;
                }
				printf("\n");
			}
        }
    }
}
